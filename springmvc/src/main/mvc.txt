pacjaging는 War가 아니라 Jar를 선택한 이유는 Jsp를 사용하지 않기 때문에 Jar를 사용하는것이 좋다.
Jar를 사용하면 항상 내장 서버(톰캣등)을 사용하고, webapp 경로도 사용되지 않는다. 내장서버 사용에 최적화 되어 있는 기능이다.
War를 사용하면 내장 서버도 사용가능 하지만, 주로 외부 서버에 배포하는 목적으로 사용한다.

스프링 부트에 .Jar를 사용하면 /resources/static/index.html 위치에 index.html 파일을 두면 Welcome 페이지로 처리해준다.

로깅 간단히 알아보기.

로깅 라이브러리
스프링 부트 라이브러리를 사용하면 스프링 부트 로깅 라이브러리가 함께 포함된다.
실무에서는 스프링 부트가 기본으로 제공하는 Logback을 대부분 사용한다.

로그 레벨 설정
LEVEL : TRACE > DEBUG > INFO > WARN > ERROR
- 개발서버는 debug 출력
- 운영 서버는 info 출력

로그 사용시 장점
- 쓰레드 정보, 클래스 이름 같은 부가 정보를 함께 볼 수 있고, 출력 모양을 조정할 수 있다.
- 시스템 아웃 콘솔에만 출력하는 것이 아니라, 파일이나 네트워크 등, 로그를 별도의 위치에 남길 수 있다.
- 성능도 일반 System.out 보다 좋으니 실무에서는 꼭 로그를 사용해야 한다.

HTTP 요청 파라미터
클라이언트에서 서버로 요청 데이터를 전달할 때는 주로 다음 3가지 방법을 사용한다.
1. GET 쿼리 파라미터
    - 메시지 바디 없이, URL의 쿼리 파라미터에 데이터를 포함해서 전달
2. POST - HTML FORM
    - content-tpye: application/x-www-form-irlencoded
    - 메시지 바디에 쿼리 파라미터 형식으로 전달
3. HTTP message body에 데이터를 직접 담아서 요청
    - HTTP API 에서 주로 사용
    - 데이터 형식은 주로 JSON 사용

요청 파라미터 - 쿼리 파라미터, HTML FORM
HttpServletRequest의 request.getParmeter() 를 사용하면 다음 두가지 요청 파라미터를 조회할 수 있다.
1. GET, 쿼리 파라미터 전송
2. POST,HTML FORM 전송
GET 쿼리 파라미터 전송 방식이든, POST HTML FORM 전송 방식이든 둘다 형식이 같으므로 구분없이 조회할 수 있다.
이것을 간단히 요청 파라미터(request parameter)조회라 한다.

JAR를 사용하면 webapp 경로를 사용할 수 없다. 이제부터 정적 리소스도 클래스 경로에 함께 포함해야한다.