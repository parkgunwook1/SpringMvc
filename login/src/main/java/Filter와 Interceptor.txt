
로그인 한 사용자만 상품 관리 페이지에 들어갈 수 있어야한다.
하지만, 지금은 로그인 안한 사용자도 url 경로만 알면은 수정, 생성에 들어갈 수 있다.

위의 url을 막아주려면 심플하게 컨트롤러에서 로그인 여부를 체크하는 로직을 하나하나 작성하면 되겠지만, 등록, 수정, 조회 등등 상품관리의
모든 컨트롤러 로직에 공통으로 로그인 여부를 확인해야 한다. 더 큰 문제는 향후 로그인과 관련된 로직이 변경될 때 이다. 작성한 모든 로직을 사 수정해야 할 수 있다.

애플리케이션 여러 로직에서 관심이 있는 것을 공통 관심사 라고 한다. 여기서는 등록, 수정, 삭제, 조회 등등 여러 로직에서 공통으로 인증에 대해서 관심을 가지고 있다.

이러한 공통 관심사는 스프링의 AOP로도 해결할 수 있지만, 웹과 관련된 공통 관심사는 지금부터 서블릿 필터 도는 스프링 인터셉터를 사용하는 것이 좋다.
웹과 관련된 공통 관심사를 처리할 때는 HTTP 헤더나 URL의 정보들이 필요한데, 서블릿 필터나 스프링 인터셉터는 HttpServletRequest를 제공한다.

필터는 서블릿이 지원하는 수문장이다.
"필터 흐름"
HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 컨트롤러

필터에서 적절하지 않은 요청이라고 판단하면 거기에서 끝을 낼 수도 있다. 그래서 로그인 여부를 체크하기에 딱 좋다.

"필터 체인"
필터는 체인으로 구성되는데, 중간에 필터를 자유롭게 추가할 수 있다. 예를 들어서 로그를 남기는 필터를 먼저 적용하고,
그 다음에 로그인 여부를 체크하는 필터를 만들 수 있다.

필터 인터페이스를 구현하고 등록하면 서블릿 컨테이너가 필터를 싱글톤 객체로 생성하고, 관리한다.
- init : 필터 초기화 메서드, 서블릿 컨테이너가 생성될 때 호출된다.
- doFilter : 고객의 요청이 올 때 마다 해당 메서드가 호출된다. 필터의 로직을 구현하면 된다.
- destory : 필터 종료 메서드 , 서블릿 컨테이너가 종료될 때 호출된다.


스프링 인터셉터
스프링 인터셉터도 서블릿 필터와 같이 웹과 관련된 공통 관심 사항을 효과적으로 해결할 수 있는 기술이다.
서블릿 필터가 서블릿이 제공하는 기술이라면, 스프링 인터셉터는 스프링 MVC가 제공하는 기술이다.
둘 다 웹과 관련된 공통 관심 사항을 처리하지만, 적용되는 순서와 범위, 그리고 사용방법이 다르다.

스프링 인터셉터는 디스패처 서블릿과 컨트롤러 사이에서 컨트롤러 호출 직전에 호출 된다.

스프링 인터셉터는 스프링 MVC가 제공하는 기능이기 때문에 결국 디스패치 서블릿 이후에 등장하게 된다.
스프링 MVC의 시작점이 디스패처서블릿이라고 생각하면 된다.

스프링 인터셉터에도 URL 패턴을 적용할 수 있는데, 서블릿 URL 패턴과는 다르고, 매우 정밀하게 설정할 수 있다.

인터셉터에서 적절하지 않은 요청이라고 판단하면 거기에서 끝을 낼 수도 있다, 그래서 로그인 여부를 체크하기에 딱 좋다.

스프링 인터셉터는 체인으로 구성되는데, 중간에 인터셉터를 자유롭게 추가할 수 있다.
예를 들어서 로그를 남기는 인터셉터를 먼저 적용하고, 그 다음에 로그인 여부를 체크하는 인터셉터를 만들 수 있다.

스프링의 인터셉터를 사용하려면 HandlerInterceptor 인터페이스를 구현하면 된다.

서블릿 필터의 경우 단순하게 doFilter 하나만 제공된다. 인터셉터는 컨트롤러 호출 전(preHandle), 호출 후(postHandle),
요청 완료 이후(afterCompletion)와 같이 단계적으로 잘 세분화되어 있다.

서블릿 필터는 단순히 request, response만 제공했지만, 인터셉터는 어떤 컨트롤러 handler가 호출되는지 호출 정보도 받을 수 있다.
그리고 어떤 modelAndView가 반환되는지 응답 정보도 받을 수 있다.

preHandle : 컨트롤러 호출 전에 호출된다. (정확히는 핸들러 어댑터 호출 전에 호출된다.)
    - preHandle의 응답값이 true이면 다음으로 진행하고, false이면 더는 진행하지 않는다.
      false인 경우 나머지 인터셉터는 물론이고, 핸들러 어댑터도 호출되지 않는다.

postHandle : 컨트롤러 호출 후에 호출된다. (정확히는 핸들러 어댑터 호출 후에 호출된다.)
            - 컨트롤러에서 예외가 발생하면 postHandle은 호출되지 않는다.

afterCompletion : 뷰가 렌더링 된 이후에 호출된다.
            - afterCompletion은 예외가 발생해도 항상 호출된다. 이경우 예외를 파라미터로 받아서 어떤 예외가 발생했는지 로그로 출력할 수 있다.
            - 예외 공통 처리를 하려면 afterCompletion을 사용해야 한다.

인터셉터는 스프링 MVC 구조에 특화된 필터 기능을 제공한다고 이해하면 된다.
스프링 MVC를 사용하고, 특별히 필터를 꼭 사용해야 하는 상황이 아니라면 인터셉터를 사용하는 것이 편리하다.