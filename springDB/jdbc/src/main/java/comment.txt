h2 데이터베이스는 개발이나 테스트 용도로 사용하기 좋은 가볍고 편리한 DB이다.
그리고 SQL을 실행할 수 있는 웹 화면을 제공한다.

클라이언트가 애플리케이션 서버를 통해 데이터를 저장하거나 조회하면, 애플리케이션 서버버는 다음 과정을 통해 데이터베이스를 사용한다.
1. 커넥션 연결 : 주로 TCP/IP를 사용해서 커넥션을 연결한다.
2. SQL 전달 : 애플리케이션 서버는 DB가 이해할 수 있는 SQL을 연결된 커넥션을 통해 DB에 전달한다.
3. 결과 응답 : DB는 전달된 SQL을 수행하고 그 결과를 응답한다. 애플리케이션 서버는 응답 결과를 활용한다.

문제는 각각의 데이터베이스마다 커넥션을 연결하는 방법, SQL을 전달하는 방법, 그리고 결과를 응답 받는 방법이 모두 다르다.
관계형  데이터베이스는 수십개가 있다.

여기에는 2가지 큰 문제가 있다.
1. 데이터베이스를 다른 종류의 데이터베이스로 변경하면 서버에 개발된 데이터베이스 사용 코드도 함께 변경해야 한다.
2. 개발자가 각각의 데이터베이스마다 커넥션 연결, SQL 전달, 그리고 결과를 응답 받는 방법을 새로 학습해야 한다.

이런 문제를 해결하기 위해 "JDBC" 라는 자바 표준이 등장한다.

JDBC 표준 인터페이스
JDBC는 자바에서 데이터베이스에 접속할 수 있도록 하는 자바 API다.
인터페이스에서 자료를 쿼리하거나 업데이트하는 방법을 제공한다.

계속 데이터베이스가 바뀌면 학습을 해야하니 개발자 입장에서는 난처한 상황이다.
그래서 대표적으로 다음 3가지 기능을 표준 인터페이스로 정의하고 추상화해서 사용한다.
java.sql.Connection - 연결
java.sql.Statement - SQL을 담은 내용
java.sql.ResultSet - SQL 요청 응답

자바는 이렇게 표준 인터페이스를 정의해두어서 이제부터 개발자는 이 표준 인터페이스만 사용해서 개발하면 된다.
그런데 인터페이스만 있다고해서 기능이 동작하지는 않는다.
이 JDBC 인터페이스를 각각의 회사에서 자신의 DB에 맞도록 구현해서 라이브러리로 제공하는데, 이것을 JDBC 드라이버라 한다.
예를 들어서 MySQL DB에 접근할 수 있는 것은 MySQL JDBC 드라이버라 하고, Oracle DB에 접근할 수 있는것은 Oracle JDBC 드라이버라 한다.

JDBC의 등장으로 2가지 문제가 해결되었다.
1. 데이터베이스를 다른 종류의 데이터베이스로 변경하면 애플리케이션 서버의 데이터베이스 사용 코드도 함께 변경해야 하는 문제
    - 애플리케이션 로직은 이제 JDBC 표준 인터페이스만 의존한다. 따라서 데이터베이스를 다른 종류의 데이터베이스로 변경하고 싶으면
      JDBC 구현 라이브러리만 변경하면 된다.
2. 개발자가 각각의 데이터베이스마다 커넥션 연결, SQL 전달, 그리고 그 결과를 응답 받는 방법을 새로 학습해야 하는 문제
    - 개발자는 JDBC 인터페이스 사용법만 학습하면 된다. 한번 배워두면 수십개의 데이터베이스에 모두 동일하게 적용할 수 있다.

"표준화의 한계"
JDBC 등장으로 많은 것이 편리해졌지만, 각각의 데이터베이스마다 SQL, 데이터타입 등의 일부 사용법이 다르다.
ANSI SQL이라는 표준이 있긴 하지만 일반적인 부분만 공통화했기 때문에 한계가 있다.
결국 데이터베이스를 변경하면 JDBC 코드는 변경하지 않아도 되지만 SQL은 해당 데이터베이스에 맞도록 변경해야 한다.
참고로 JPA를 사용하면 이렇게 각각의 데이터베이스마다 다른 SQL을 정의해야 하는 문제도 많은 부분을 해결할 수 있다.


JDBC는 오래된 기술이고, 사용하는 방법도 복잡하다. 그래서 최근에는 JDBC를 직접 사용하기 보다는 JDBC를 편리하게 사용하는 다양한 기술이 존재한다.
대표적으로 SQL Mapper와 ORM 기술로 나눌 수 있다.

SQL Mapper
    - 장점 : JDBC를 편리하게 사용하도록 도와준다.
        - SQL 응답 결과를 객체로 편리하게 변환해준다.
        - JDBC의 반복 코드를 제거해준다.
    - 단점 : 개발자가 SQL을 직접 작성해야 한다.
    - 대표기술 : 스프링 JdbcTemplate, MyBatis

ORM기술
    - ORM은 객체를 관계형 데이터베이스 테이블과 매핑해주는 기술이다. 이 기술 덕분에 개발자는 반복적인 SQL을 직접 작성하지 않고,
      ORM 기술이 개발자 대신에 SQL을 동적으로 만들어 실행해준다. 추가로 각각의 데이터베이스마다 다른 SQL을 사용하는 문제도 중간에서 해결해준다.
    - 대표 기술 : JPA, 하이버네이트, 이클립스링크
    - JPA는 자바 진영의 ORM 표준 인터페이스이고, 이것을 구현한 것으로 하이버네이트와 이클립스 링크 등의 구현 기술이 있다.

이런 기술들도 내부에서는 모두 JDBC를 사용한다, 따라서 JDBC를 직접 사용하지는 않더라도, JDBC가 어떻게 동작하는지 기본 원리를 알아두어야 한다.
그래야 해당 기술들을 더 깊이있게 이해할 수 있고, 무엇보다 문제가 발생했을 때 근본적인 문제를 찾아서 해결할 수 있다.
JDBC는 자바 개발자라면 꼭 알아두어야 하는 필수 기본 기술이다.


데이터베이스 커넥션을 획득할 때는 복잡한 과정을 거친다.

커넥션을 새로 만드는 것은 과정도 복잡하고 시간도 많이 소모되는 일이다.
db는 물론이고 애플리케이션 서버에서도 TCP/IP 커넥션을 새로 생성하기 위한 리소스를 매번 사용해야 한다.
진짜 문제는 고객이 애플리케이션을 사용할 때, SQL을 실행하는 시간 뿐만 아니라 커넥션을 새로 만드는 시간이 추가되기 때문에 결과적으로
응답 속도에 영향을 준다.

이런 문제를 한번에 해결하는 아이디어가 바로 커넥션을 미리 생성해두고 사용하는 커넥션 풀이라는 방법이다.
커넥션 풀은 커넥션을 관리하는 풀이다.

커넥션 풀에 있는 커넥션은 TCP/IP로 DB와 커넥션이 연결되어 있는 상태이기 때문에 언제든지 즉시 SQL을 DB에 전달할 수 있다.

"커넥션 풀 사용"
- 애플리케이션 로직에서 이제는 DB 드라이버를 통해서 새로운 커넥션을 획득하는 것이 아니다.
- 이제는 커넥션 풀을 통해 이미 생성되어 있는 커넥션을 객체 참조로 그냥 가져다 쓰기만 하면 된다.
- 커넥션 풀에 커넥션을 요청하면 커넥션 풀은 자신이 가지고 있는 커넥션 중에 하나를 반환한다.
- 애플리케이션 로직은 커넥션 풀에서 받은 커넥션을 사용해서 SQL을 데이터베이스에 전달하고 그 결과를 받아서 처리한다.
- 커넥션을 사용하고 나면 이제는 커넥션을 종료하는 것이 아니라, 다음에다시 사용할 수 있도록 해당 커넥션을 그대로 커넥션 풀에
  반환하면 된다. 여기서 주의할 점은 커넥션을 종료하는 것이 아니라 커넥션이 살아있는 상태로 커넥션 풀에 반환해야 하는 것이다.


커넥션을 얻는 방법은 앞서 학습한 JDBC DriverManager를 직접 사용하거나, 커넥션 풀을 사용하는 등 다양한 방법이 존재한다.

애플리케이션 로직에서 DriverManager를 통해서 커넥션을 획득하다가, 커넥션 풀을 사용하는 방법으로 변경하려면 어떻게 해야할까?

"커넥션을 획득하는 방법을 추상화"
- 자바에서는 javax.sql.DataSource라는 인터페이스를 제공한다.
- DataSource는 커넥션을 획득하는 방법을 추상화 하는 인터페이스이다.
- 이 인터페이스의 핵심 기능은 커넥션 조회 하나이다.(다른 일부 기능도 있지만 크게 중요하지 않다.)

"정리"
- 대부분의 커넥션 풀은 DataSource 인터페이스를 이미 구현해두었다. 따라서 개발자는 각종의 커넥션 풀의 코드를 직접 의존하는 것이 아니라
  DataSource 인터페이스만 의존하도록 애플리케이션 로직을 작성하면 된다.
- 커넥션 풀 구현 기술을 변경하고 싶으면 해당 구현체로 갈아끼우기만 하면 된다.
- DriverManager 는 DataSource 인터페이스를 사용하지 않는다. 따라서 DriverManager는 직접 사용 해야 한다.
  따라서 DriverManager를 사용하다가 DataSource 기반의 커넥션 풀을 사용하도록 변경하면  관련 코드를 다 고쳐야 한다.
  이런 문제를 해결하기 위해 스프링은 DriverManager도 DataSource를 통해서 사용할 수 있도록 DriverManagerDataSource라는 DataSource를 구현한 클래스를 제공한다.
- 자바는 DataSource를 통해 커넥션을 획득하는 방법을 추상화했다.
  이제 애플리케이션 로직은  DataSource 인터페이스에만 의존하면 된다.
  덕분에 DriverManagerDataSource를 통해서 DriverManager 를 사용하다가 커넥션 풀을 사용하도록 코드를 변경해도 애플리케이션 로직은 변경하지 않아도 된다.

"트랜잭션"
트랜잭션은 이름 그대로 번역하면 거래라는 뜻이다.
이것을 쉽게 풀어서 이야기하면, 데이터베이스에서 트랜잭션은 하나의 거래를 안전하게 처리하도록 보장해주는 것을 뜻한다.
모든 작업이 성공해서 데이터베이스에 정상 반영하는 것을 커밋이라 하고, 작업 중 하나라도 실패해서 거래 이전으로 되돌리는 것을 록백이라 한다.

트랜잭션 ACID
원자성 : 트랜잭션 내에서 실행한 작업들은 마치 하나의 작업인 것처럼 모두 성공하거나 모두 실패해야 한다.
일관성 : 모든 트렌잭션은  일관성 있는 데이터베이스 상태를 유지해야 한다. 데이터베이스에서 정한 무결성 제약 조건을 항상 만족해야 한다.
격리성 : 동시에 실행되는 트랜잭션들이 서로에게 영향을 미치지 않도록 격리한다. 예를 들어 동시에 같은 데이터를 수정하지 못하도록 해야 한다.
        격리성은 동시성과 관련된 성능 이슈로 인해 트랜잭션 격리 수준을 선택할 수 있다.
지속성 : 트랜잭션을 성공적으로 끝내면 그 결과가 항상 기록되어야 한다. 중간에 시스템에 문제가 발생해도 데이터베이스 로그 등을 사용해서 성공한
        트랜잭션 내용을 복구해야 한다.


자동 커밋
트랜잭션을 사용하려면 먼저 자동 커밋과 수동 커밋을 이해해야 한다.
자동 커밋으로 설정하면 각각의 쿼리 실행 직후에 자동으로 커밋을 호출한다. 따라서 커밋이나 롤백을 직접 호출하지 않아도 되는 편리함이 있다.
하지만 자동으로 되기때문에 우리가 원하는 트랜잭션 기능을 제대로 사용할 수 없다.





























