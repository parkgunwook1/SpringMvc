서블릿은 2가지 방식으로 예외 처리를 지원한다.
1. Exception (예외)
2. response.sendError(Http 상태 코드, 오류 메시지)

"자바 직접 실행"
자바의 메인 메서드를 직접 실행하는 경우 main 이라는 이름의 쓰레드가 실행된다.
실행 도중에 예외를 잡지 못하고 실행한 main() 메서드를 넘어서 예외가 던져지면, 예외 정보를 넘기고 해당 쓰레드는 종료된다.

"웹 애플리케이션"
웹 애플리케이션은 사용자 요청별로 별도의 쓰레드가 할당되고, 서블릿 컨테이너 안에서 실행된다.
애플리케이션에서 예외가 발생했는데, 어디선가 try ~ catch로 예외를 잡아서 처리하면 아무 문제가 없다.
그런데 만약에 애플리케이션에서 예외를 잡지 못하고, 서블릿 밖으로 까지 예외가 전달되면 어떻게 동작할까?

결국 톰캣 같은 WAS 까지 예외가 전달된다.
WAS는 예외가 올라오면 어떻게 처리해야할까?

Exception의 경우 서버 내부에서 처리할 수 없는 오류가 발생한 것으로 생각해서 HTTP 상태 코드 500을 반환한다.

서블릿 예외 순서
컨트롤러 예외 > was 예외 > 예외 컨트롤러 > html return > 클라이언트에게 예외 화면 제공

서블릿 예외처리 - 오류 페이지 작동 원리
- 서블릿은 Exception 예외가 발생해서 서블릿 밖으로 전달되거나 또는 response.sendError() 가 호출되었을 때 설정된 오류 페이지를 찾는다.
"예외 발생 흐름"
was < 필터 < 서블릿 < 인터셉터 < 컨트롤러(예외발생)

"snedError 흐름"
was(sendError 호출 기록 확인) < 필터 < 서블릿 < 인터셉터 < 컨트롤러(response.sendError())

WAS는 해당 예외를 처리하는 오류 페이지 정보를 확인한다.
확인 후에 RuntimeException의 오류페이지가 /error-page/500 으로 지정되어 있으면 다시 was 에서 컨트롤러까지 던진다.
- WAS '/error-page/500' > 다시요청 > 필터 > 서블릿 > 인터셉터 > 컨트롤러(/error-page/500) > view

중요한 점은 웹 브라우저(클라이언트)는 서버 내부에서 이런 일이 일어나는지 전혀 모른다는 점이다. 오직 서버 내부에서 오류 페이지를 찾기 위해 추가적인 호출을 한다.

정리하면 다음과 같다.
1. 예외가 발생해서 WAS 까지 전파된다.
2. WAS는 오류 페이지 경로를 찾아서 내부에서 오류 페이지를 호출한다. 이 때 오류 페이지 경로로 필터, 서블릿, 인터셉터, 컨트롤러가 모두 다시 호출된다.


오류가 발생하면 다시 한번 호출 되는데 이미 로그인 체크를 필터에서 했으면 한번 더 호출되는 것은 매우 비효율적이다.
결국 클라이언트로ㅂ 부터 발생한 정상 요청인지, 아니면 오류 페이지를 출력하기 위한 내부 요청인지 구분할 수 있어야 한다.
서블릿 이런 문제를 해결하기 위해 DispatcherType 이라는 추가 정보를 제공한다.

DispatcherType
필터는 이런 경우를 위해서 dispatcherTypes 라는 옵션을 제공한다.
고객이 처음 요청하면 dipatcherType=Request 이다.
이렇듯 서블릿 스펙은 실제 고객이 요청한 것인지, 서버가 내부에서 오류 페이지를 요청하는 것인지 DispatcherType 으로 구분할 수 있는 방법을 제공한다.

DispatcherType
- REQUEST : 클라이언트 요청
- ERROR : 오류 요청
- FORWARD : MVC 에서 배웠던 서블릿에서 다른 서블릿이나 JSP를 호출할 때 (RequestDispatcher.forward(request, response))
- INCLUDE : 서블릿에서 다른 서블릿이나 JSP의 결과를 포함할 때 (RequestDispatcher.include(request, response));
- ASYNC : 서블릿 비동기 호출

지금까지 예외 처리 페이지를 만들기 위해서 복잡한 과정을 거쳤다.
- WebServerCustomizer 를 만들고 예외 종류에 따라서 ErrorPage를 추가하고
- 예외 처리용 컨트롤러 ErrorPageController 를 만든다.

스프링 부트는 이런 과정을 모두 기본으로 제공한다.
- ErrorPage를 자동으로 등록한다. 이 때 '/error' 라는 경로로 기본 오류 페이지를 설정한다.
    - new ErrorPage("/error"), 상태코드와 예외를 설정하지 않으면 기본 오류 페이지로 사용된다.
    - 서블릿 밖으로 예외가 발생하거나, response.sendError(...)가 호출되면 모든 오류는 /error 를 호출하게 된다.
- BasicErrorController 라는 스프링 컨트롤러를 자동으로 등록한다.
    - ErrorPage 에서 등록한 /error를 매핑해서 처리하는 컨트롤러다.

기존에 만든 WebServerCustomizer에 있는 @Component를 주석 하면,
오류가 발생했을 때 오류 페이지로 /error를 기본 요청한다.
스프링 부트가 자동 등록한 BasicErrorController는 이경로를 기본으로 받는다.

개발자는 오류 페이지만 등록
BasicErrorController는 기본적인 로직이 모두 개발되어 있다.
개발자는 오류 페이지 화면만 BasicErrorController가 제공하는 툴과 우선순위에 따라서 등록하면된다.
정적 HTML 이면 정적 리소스, 뷰 템플릿을 사용해서 동적으로 오류 화면을 만들고 싶으면 뷰 템플릿 경로에 오류 페이지 파일을 만들어서 넣어두기만 하면 된다.

"뷰 선택 우선 순위"
1. 뷰 템플릿
    - resources/templates/error/500.html
2. 정적 리소스 (static, public)
    - resources/static/error/400.html
3. 적용 대상이 없을 때 뷰 이름(error)
    - resources/templates/error.html

해당 경로 위치에 HTTP 상태 코드 이름의 뷰 파일을 넣어두면 된다.
뷰 템플릿이 정적 리소스보다 우선순위가 높고, 404, 500 처럼 구체적인 것이 5XX처럼 덜 구체적인 것 보다 우선순위가 높다.
5XX, 4XX 라고 하면 500대, 400대 오류를 처리해준다.

BasicErrorController의 오류 관련 내부 정보들을 고객에게 노출하는 것은 좋지 않다.
고객잉 해당 정보를 읽어도 혼란만 더해지고, 보안상 문제가 될 수도 있다.
그래서 BasicErrorController 오류 컨트롤러에서 다음 오류 정보를 model에 포함할지 여부 선택할 수 있다.

server.error.include-exception=true
server.error.include-message=on_param
server.error.include-stacktrace=on_param
server.error.include-binding-errors=on_param

기본 값이 naver인 부분은 3가지 옵션을 사용할 수 있다.
never, always, on_param
never : 사용하지 않음
always : 항상 사용
on_param : 파라미터가 있을 때 사용

on_param은 파라미터가 있으면 해당 정보를 노출된다. 디버그 시 문제를 확인하기 위해 사용할 수 있다.
그런데 이 부분도 개발 서버에서 사용할 수 있지만, 운영 서버에서는 권장하지 않는다.

"실무에서는 이것들을 노출하면 안된다. 사용자에게는 이쁜 오류 화면과 고객이 이해할 수 있는 간단한 오류 메시지를 보여주고 오류는 서버에 로그로 남겨서 로그를 확인해야 한다."

